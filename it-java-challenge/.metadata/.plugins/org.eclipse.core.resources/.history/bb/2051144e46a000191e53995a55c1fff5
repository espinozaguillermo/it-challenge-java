package it.java.challenge.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import it.java.challenge.model.InscripcionesCurso;
import it.java.challenge.repository.InscripcionesCursoRepository;
import it.java.challenge.exception.ResourceNotFoundException;

@RestController
@RequestMapping("/api/v1")
public class InscripcionesCarreraController {

	@Autowired
	private InscripcionesCursoRepository inscripcionescursoRepository;

	@GetMapping("/inscripcionescursos")
	public List<InscripcionesCurso> getAllInscripcionesCursos() {
		return inscripcionescursoRepository.findAll();
	}

	@GetMapping("/inscripcionescursos/{id}")
	public ResponseEntity<InscripcionesCurso> getInscripcionesCursoById(@PathVariable(value = "id") Integer inscripcionescursoId)
			throws ResourceNotFoundException {
		InscripcionesCurso inscripcionescurso = inscripcionescursoRepository.findById(inscripcionescursoId)
				.orElseThrow(() -> new ResourceNotFoundException("InscripcionesCurso no encontrada id :: " + inscripcionescursoId));
		return ResponseEntity.ok().body(inscripcionescurso);
	}

	@PostMapping("/inscripcionescursos")
	public InscripcionesCurso createInscripcionesCurso(@Valid @RequestBody InscripcionesCurso inscripcionescurso) {
		return inscripcionescursoRepository.save(inscripcionescurso);
	}

	@PutMapping("/inscripcionescursos/{id}")
	public ResponseEntity<InscripcionesCurso> updateInscripcionesCurso(@PathVariable(value = "id") Integer inscripcionescursoId,
			@Valid @RequestBody InscripcionesCurso inscripcionescursoDetails) throws ResourceNotFoundException {
		InscripcionesCurso inscripcionescurso = inscripcionescursoRepository.findById(inscripcionescursoId)
				.orElseThrow(() -> new ResourceNotFoundException("InscripcionesCurso no encontrada id :: " + inscripcionescursoId));

		inscripcionescurso.setAlumno(inscripcionescursoDetails.getAlumno());
		inscripcionescurso.setCurso(inscripcionescursoDetails.getCurso());
		inscripcionescurso.setFechainscripcion(inscripcionescursoDetails.getFechainscripcion());
		inscripcionescurso.setCalificacion(inscripcionescursoDetails.getCalificacion());
		final InscripcionesCurso updatedInscripcionesCurso = inscripcionescursoRepository.save(inscripcionescurso);
		return ResponseEntity.ok(updatedInscripcionesCurso);
	}

	@DeleteMapping("/inscripcionescursos/{id}")
	public Map<String, Boolean> deleteInscripcionesCurso(@PathVariable(value = "id") Integer inscripcionescursoId)
			throws ResourceNotFoundException {
		InscripcionesCurso inscripcionescurso = inscripcionescursoRepository.findById(inscripcionescursoId)
				.orElseThrow(() -> new ResourceNotFoundException("InscripcionesCurso no encontrada id :: " + inscripcionescursoId));

		inscripcionescursoRepository.delete(inscripcionescurso);
		Map<String, Boolean> response = new HashMap<>();
		response.put("eliminado", Boolean.TRUE);
		return response;
	}

}
