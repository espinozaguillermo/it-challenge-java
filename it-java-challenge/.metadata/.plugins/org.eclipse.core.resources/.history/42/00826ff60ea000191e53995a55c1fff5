package it.java.challenge.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import it.java.challenge.model.Persona;
import it.java.challenge.repository.PersonaRepository;
import it.java.challenge.exception.ResourceNotFoundException;

@RestController
@RequestMapping("/api/v1")
public class PersonaController {
	
	@Autowired
    private PersonaRepository personaRepository;
	
	@GetMapping("/personas")
    public List<Persona> getAllPersonas() {
        return personaRepository.findAll();
    }
	
	@GetMapping("/personas/{identificador}")
    public ResponseEntity<Persona> getPersonaById(@PathVariable(value = "identificador") Integer personaIdentificador)
        throws ResourceNotFoundException {
        Persona persona= personaRepository.findById(personaIdentificador)
          .orElseThrow(() -> new ResourceNotFoundException("Persona no encontrada id :: " + personaIdentificador));
        return ResponseEntity.ok().body(persona);
    }
	
	@PostMapping("/personas")
    public Persona createPersona(@Valid @RequestBody Persona persona) {
        return personaRepository.save(persona);
    }
	
	@PutMapping("/personas/{id}")
    public ResponseEntity<Persona> updatePersona(@PathVariable(value = "identificador") Integer personaIdentificador,
         @Valid @RequestBody Persona personaDetails) throws ResourceNotFoundException {
        Persona persona = personaRepository.findById(personaIdentificador)
        .orElseThrow(() -> new ResourceNotFoundException("Persona no encontrada id :: " + personaIdentificador));

        persona.setNombre(personaDetails.getNombre());
        persona.setApellido(personaDetails.getApellido());
        persona.setFechaNacimiento(personaDetails.getFechaNacimiento());
        persona.setTipoDocumento(personaDetails.getTipoDocumento());
        persona.setNroDocumento(personaDetails.getNroDocumento());
        final Persona updatedPersona = personaRepository.save(persona);
        return ResponseEntity.ok(updatedPersona);
    }

}
